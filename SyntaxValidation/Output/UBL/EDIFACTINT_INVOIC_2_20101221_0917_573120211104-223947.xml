<?xml version="1.0" encoding="UTF-8"?>
<svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                        xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                        xmlns:error="https://doi.org/10.5281/zenodo.1495494#error"
                        xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                        xmlns:schxslt-api="https://doi.org/10.5281/zenodo.1495494#api"
                        xmlns:schxslt="https://doi.org/10.5281/zenodo.1495494"
                        xmlns:xs="http://www.w3.org/2001/XMLSchema"
                        xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"
                        xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"
                        xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"
                        xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2"
                        xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2"
                        xmlns:cn="urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2"
                        xmlns:ubl="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">
   <svrl:ns-prefix-in-attribute-values prefix="ext"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="cbc"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="cac"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="qdt"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="udt"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="cn"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="ubl"
                                       uri="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"/>
   <svrl:ns-prefix-in-attribute-values prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/>
   <svrl:metadata xmlns:dct="http://purl.org/dc/terms/"
                  xmlns:skos="http://www.w3.org/2004/02/skos/core#">
      <dct:creator>
         <dct:Agent>
            <skos:prefLabel>SAXON/HE 9.9.1.5</skos:prefLabel>
         </dct:Agent>
      </dct:creator>
      <dct:created>2021-11-04T22:39:47.551+11:00</dct:created>
      <dct:source>
         <rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/">
            <dct:creator>
               <dct:Agent>
                  <skos:prefLabel>SchXslt/1.8.2 SAXON/HE 9.9.1.5</skos:prefLabel>
                  <schxslt.compile.typed-variables xmlns="https://doi.org/10.5281/zenodo.1495494#">true</schxslt.compile.typed-variables>
               </dct:Agent>
            </dct:creator>
            <dct:created>2021-09-22T11:48:47.996+10:00</dct:created>
         </rdf:Description>
      </dct:source>
   </svrl:metadata>
   <svrl:active-pattern id="UBL-model"
                        documents="file:///C:/Users/Sunil/CAPSTONE/Class/XML/UBL//EDIFACTINT_INVOIC_2_20101221_0917_5731.ubl"/>
   <svrl:fired-rule context="/ubl:Invoice | /cn:CreditNote"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]"
                       flag="fatal"
                       id="BR-S-01-AUNZ"
                       test="((count(//cac:AllowanceCharge/cac:TaxCategory[normalize-space(cbc:ID) = 'S']) + count(//cac:ClassifiedTaxCategory[normalize-space(cbc:ID) = 'S'])) &gt; 0 and count(cac:TaxTotal/cac:TaxSubtotal/cac:TaxCategory[normalize-space(cbc:ID) = 'S']) &gt; 0) or ((count(//cac:AllowanceCharge/cac:TaxCategory[normalize-space(cbc:ID) = 'S']) + count(//cac:ClassifiedTaxCategory[normalize-space(cbc:ID) = 'S'])) = 0 and count(cac:TaxTotal/cac:TaxSubtotal/cac:TaxCategory[normalize-space(cbc:ID) = 'S']) = 0)">
      <svrl:text>[BR-S-01-AUNZ]-An Invoice that contains an Invoice line (BG-25), a Document level allowance (BG-20) or a Document level charge (BG-21) where the Tax category code (BT-151, BT-95 or BT-102) is "Standard rated" shall contain in the Tax breakdown (BG-23) at least one Tax category code (BT-118) equal with "Standard rated".</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party/cbc:EndpointID"/>
   <svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party/cac:PostalAddress"/>
   <svrl:fired-rule context="cac:AccountingCustomerParty/cac:Party/cbc:EndpointID"/>
   <svrl:fired-rule context="cac:AccountingCustomerParty/cac:Party/cac:PostalAddress"/>
   <svrl:fired-rule context="cac:TaxRepresentativeParty"/>
   <svrl:fired-rule context="cac:TaxRepresentativeParty/cac:PostalAddress"/>
   <svrl:fired-rule context="cac:Delivery/cac:DeliveryLocation/cac:Address"/>
   <svrl:fired-rule context="/ubl:Invoice/cac:TaxTotal | /cn:CreditNote/cac:TaxTotal"/>
   <svrl:fired-rule context="cac:TaxTotal/cac:TaxSubtotal"/>
   <svrl:fired-rule context="/*/cac:TaxTotal/cac:TaxSubtotal/cac:TaxCategory[normalize-space(cbc:ID) = 'S'][cac:TaxScheme/normalize-space(upper-case(cbc:ID))='GST']"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}TaxTotal[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}TaxSubtotal[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}TaxCategory[1]"
                       flag="fatal"
                       id="BR-S-08-AUNZ"
                       test="every $rate in xs:decimal(cbc:Percent) satisfies (((exists(//cac:InvoiceLine[cac:Item/cac:ClassifiedTaxCategory/normalize-space(cbc:ID) = 'S'][cac:Item/cac:ClassifiedTaxCategory/xs:decimal(cbc:Percent) =$rate]) or exists(//cac:AllowanceCharge[cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate])) and ((../xs:decimal(cbc:TaxableAmount - 1) &lt; (sum(../../../cac:InvoiceLine[cac:Item/cac:ClassifiedTaxCategory/normalize-space(cbc:ID)='S'][cac:Item/cac:ClassifiedTaxCategory/xs:decimal(cbc:Percent) =$rate]/xs:decimal(cbc:LineExtensionAmount)) + sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=true()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)) - sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=false()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)))) and (../xs:decimal(cbc:TaxableAmount + 1) &gt; (sum(../../../cac:InvoiceLine[cac:Item/cac:ClassifiedTaxCategory/normalize-space(cbc:ID)='S'][cac:Item/cac:ClassifiedTaxCategory/xs:decimal(cbc:Percent) =$rate]/xs:decimal(cbc:LineExtensionAmount)) + sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=true()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)) - sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=false()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)))))) or (exists(//cac:CreditNoteLine[cac:Item/cac:ClassifiedTaxCategory/normalize-space(cbc:ID) = 'S'][cac:Item/cac:ClassifiedTaxCategory/xs:decimal(cbc:Percent) =$rate]) or exists(//cac:AllowanceCharge[cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate])) and ((../xs:decimal(cbc:TaxableAmount - 1) &lt; (sum(../../../cac:CreditNoteLine[cac:Item/cac:ClassifiedTaxCategory/normalize-space(cbc:ID)='S'][cac:Item/cac:ClassifiedTaxCategory/xs:decimal(cbc:Percent) =$rate]/xs:decimal(cbc:LineExtensionAmount)) + sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=true()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)) - sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=false()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)))) and (../xs:decimal(cbc:TaxableAmount + 1) &gt; (sum(../../../cac:CreditNoteLine[cac:Item/cac:ClassifiedTaxCategory/normalize-space(cbc:ID)='S'][cac:Item/cac:ClassifiedTaxCategory/xs:decimal(cbc:Percent) =$rate]/xs:decimal(cbc:LineExtensionAmount)) + sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=true()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount)) - sum(../../../cac:AllowanceCharge[cbc:ChargeIndicator=false()][cac:TaxCategory/normalize-space(cbc:ID)='S'][cac:TaxCategory/xs:decimal(cbc:Percent) = $rate]/xs:decimal(cbc:Amount))))))">
      <svrl:text>[BR-S-08-AUNZ]-For each different value of Tax category rate (BT-119) where the Tax category code (BT-118) is "Standard rated", the Tax category taxable amount (BT-116) in a Tax breakdown (BG-23) shall equal the sum of Invoice line net amounts (BT-131) plus the sum of document level charge amounts (BT-99) minus the sum of document level allowance amounts (BT-92) where the Tax category code (BT-151, BT-102, BT-95) is "Standard rated" and the Tax rate (BT-152, BT-103, BT-96) equals the Tax category rate (BT-119).</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="cac:LegalMonetaryTotal"/>
   <svrl:fired-rule context="/ubl:Invoice/cac:LegalMonetaryTotal/cbc:PayableAmount"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="cac:InvoiceLine/cac:Item/cac:StandardItemIdentification/cbc:ID | cac:CreditNoteLine/cac:Item/cac:StandardItemIdentification/cbc:ID"/>
   <svrl:active-pattern id="UBL-syntax"
                        documents="file:///C:/Users/Sunil/CAPSTONE/Class/XML/UBL//EDIFACTINT_INVOIC_2_20101221_0917_5731.ubl"/>
   <svrl:fired-rule context="/ubl:Invoice | /cn:CreditNote"/>
   <svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party"/>
   <svrl:fired-rule context="cac:TaxRepresentativeParty"/>
   <svrl:fired-rule context="cac:Delivery"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:TaxSubtotal"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"/>
   <svrl:fired-rule context="//*[ends-with(name(), 'Amount') and not(ends-with(name(),'PriceAmount')) and not(ancestor::cac:Price/cac:AllowanceCharge)]"/>
   <svrl:active-pattern id="Codesmodel"
                        documents="file:///C:/Users/Sunil/CAPSTONE/Class/XML/UBL//EDIFACTINT_INVOIC_2_20101221_0917_5731.ubl"/>
   <svrl:fired-rule flag="fatal" context="cbc:InvoiceTypeCode | cbc:CreditNoteTypeCode"/>
   <svrl:fired-rule flag="fatal" context="cbc:DocumentCurrencyCode"/>
   <svrl:fired-rule flag="fatal" context="cbc:EndpointID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:Country/cbc:IdentificationCode"/>
   <svrl:fired-rule flag="fatal" context="cac:PartyLegalEntity/cbc:CompanyID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cbc:EndpointID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:Country/cbc:IdentificationCode"/>
   <svrl:fired-rule flag="fatal" context="cac:PartyLegalEntity/cbc:CompanyID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:Country/cbc:IdentificationCode"/>
   <svrl:fired-rule flag="fatal" context="cac:Country/cbc:IdentificationCode"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:TaxCategory/cbc:ID"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[2]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[3]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[4]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[5]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[6]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:InvoicedQuantity[@unitCode] | cbc:BaseQuantity[@unitCode] | cbc:CreditedQuantity[@unitCode]"/>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
   <svrl:fired-rule flag="fatal" context="cac:StandardItemIdentification/cbc:ID[@schemeID]"/>
   <svrl:fired-rule flag="fatal" context="cac:ClassifiedTaxCategory/cbc:ID"/>
   <svrl:failed-assert location="/Q{urn:oasis:names:specification:ubl:schema:xsd:Invoice-2}Invoice[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}InvoiceLine[7]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Item[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ClassifiedTaxCategory[1]/Q{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID[1]"
                       flag="fatal"
                       id="BR-CL-18"
                       test="( ( not(contains(normalize-space(.),' ')) and contains( ' AE L M E S Z G O K B ',concat(' ',normalize-space(.),' ') ) ) )">
      <svrl:text>[BR-CL-18]-Invoice tax categories MUST be coded using UNCL5305 code list</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule flag="fatal"
                    context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"/>
</svrl:schematron-output>
